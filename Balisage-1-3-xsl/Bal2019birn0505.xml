<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../Balisage-1-3-rng/balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook">
    <title>The integration of XML databases and content management systems in digital
        editions</title>
    <subtitle>Understanding eXist-db through Reese’s Peanut Butter Cups</subtitle>
    <info>
        <abstract>
            <para>We have identified four models for integrating digital edition content into
                eXist-db [<xref linkend="eXist-db"/>], which are, in decreasing order of eXist-db
                dependence: 1) TEI Publisher [<xref linkend="teiPublisher"/>], 2) the eXist-db app
                framework using HTML templating [<xref linkend="templating"/>], 3) the eXist-db app
                framework without HTML templating [<xref linkend="webapp"/>] (similar to Joe
                Wicentowski's Punch project [<xref linkend="punch"/>]), and 4) using Apache [<xref
                    linkend="apache"/>] and PHP [<xref linkend="php"/>] to mediate between the user
                and eXist-db, so that eXist-db provides only XML database services. Our presentation
                will examine and compare these ways of conceptualizing and implementing the
                infrastructure for a digital edition. Each of them has advantages and disadvantages,
                primarily from the perspective of sustainability, and those concerns apply to
                edition frameworks generally, and are therefore not specific to eXist-db.</para>
        </abstract>
        <author>
            <personname>
                <firstname>David</firstname>
                <othername>J.</othername>
                <surname>Birnbaum</surname>
            </personname>
            <personblurb>
                <para>David J. Birnbaum is Professor and Chair of the Department of Slavic Languages
                    and Literatures at the University of Pittsburgh. He has been involved in the
                    study of electronic text technology since the mid-1980s, has delivered
                    presentations at a variety of electronic text technology conferences, and has
                    served on the board of the Association for Computers and the Humanities, the
                    editorial board of <emphasis role="ital">Markup languages: theory and
                        practice</emphasis>, and the Text Encoding Initiative Technical Council.
                    Much of his electronic text work intersects with his research in medieval Slavic
                    manuscript studies, but he also often writes about issues in the philosophy of
                    markup.</para>
            </personblurb>
            <affiliation>
                <jobtitle>Professor and Chair</jobtitle>
                <orgname>Department of Slavic Languages and Literatures, University of Pittsburgh
                    (US)</orgname>
            </affiliation>
            <email>djbpitt@gmail.com</email>
            <link>http://www.obdurodon.org</link>
        </author>
        <author>
            <personname>
                <firstname>Leif-Jöran</firstname>
                <surname>Olsson</surname>
            </personname>
            <personblurb>
                <para>Leif-Jöran Olsson has been employed since 2005 as a systems developer at
                    Språkbanken, the Swedish Language bank, University of Gothenburg, where he
                    develops research infrastructure for language technology, both nationally and
                    within CLARIN ERIC. His project management experience involves both long-term
                    partner projects (e.g., the Swedish Literary Bank, the Selma Lagerlöf Archive,
                    the Swedish Drama web) and short-term domain-specific toolboxes (including
                    training and use case analysis). He has extensive experience with teaching in
                    language technology and programming. Leif-Jöran obtained his MA in Language
                    Technology from Uppsala University in 2004, and he is one of the core developers
                    of the open-source eXist-db native XML database.</para>
            </personblurb>
            <affiliation>
                <jobtitle>Systems Developer</jobtitle>
                <orgname>Språkbanken, Department of Swedish, University of Gothenburg
                    (Sweden)</orgname>
            </affiliation>
            <email>leif-joran.olsson@svenska.gu.se</email>
            <link>https://spraakbanken.gu.se/personal/ljo</link>
        </author>
        <author>
            <personname>
                <firstname>Joseph</firstname>
                <surname>Wicentowski</surname>
            </personname>
            <personblurb>
                <para>Joseph Wicentowski is a historian who specializes in the use of open standards
                    to improve the accessibility and utility of scholarly editions. Since completing
                    his Ph.D. in History at Harvard University in 2007, he has spearheaded a project
                    to convert a major diplomatic documentary edition to TEI, leveraging the XML
                    family of technologies to enable editors, researchers, and the public to access
                    texts online in multiple open formats. Wicentowski has led workshops on the
                    XQuery language and the eXist-db open source native XML database at TEI@Oxford
                    Summer School in 2010–11 and Digital Humanities 2017, serves as a community
                    liaison for the eXist-db community, and is co-author of a forthcoming book on
                    XQuery for digital humanists in the Coding for Humanists series from Texas
                    A&amp;M University Press.</para>
            </personblurb>
            <affiliation>
                <jobtitle>Digital History Advisor</jobtitle>
                <orgname>Office of the Historian, US Department of State</orgname>
            </affiliation>
            <email>joewiz@gmail.com</email>
            <link>https://github.com/joewiz</link>
        </author>
    </info>
    <section>
        <title>Introduction</title>
        <para>In the 1980s Reese’s Peanut Butter Cups, long owned by the Hershey Corporation and one
            of the best selling and most popular candy products in the US (<xref linkend="upton"/>),
            deployed an advertising campaign that portrayed the idea of eating chocolate and peanut
            butter together as a serendipitous pleasure. In one television advertisement (<xref
                linkend="reeses"/>), two persons accidentally walk into each other on the street, he
            eating a chocolate bar and she (perhaps surprisingly) eating peanut butter out of a jar
            with her finger. They collide, the chocolate bar winds up embedded in the peanut butter,
            and they protest, in unison: <quote>You got your chocolate in my peanut butter"</quote>
            and <quote>You got peanut butter on my chocolate!</quote> They both then,
            simultaneously, realize that they like the taste of the combination, and proclaim, still
            in unison, <quote>Delicious!</quote>, as an older man (apparently a grocer; he wears an
            apron) suddenly materializes between them, standing uncomfortably close and silently
            ogling the packaged Reese’s Peanut Butter Cups that he holds up (for the camera; it is
            behind the field of view of the two principals).</para>
        <figure xml:id="reeses_image" xreflabel="Reese’s Peanut Butter Cups (commercial; product)">
            <mediaobject>
                <imageobject>
                    <imagedata format="jpg" fileref="reeses.jpg" width="49%"/>
                </imageobject>
                <imageobject>
                    <imagedata fileref="reeses-wrappers.jpg" width="49%"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>Meanwhile, in a galaxy far, far away, the eXist-db XML database was born in <emphasis
                role="bold">[EXPAND]</emphasis>. Since its inception, eXist-db has provided the
            services one expects from any database management system (DBMS): it stores records (XML
            documents), builds persistent indexes, supports retrieval with a query language
            (XQuery), and provides the housekeeping functionality (e.g., user authentication) those
            processes require. eXist-db is commonly hosted inside an HTTP server and servlet
            container (it ships with <xref linkend="Jetty"/>, but other hosts are also supported),
            which mediates between the user and the eXist-db functionality, as is illustrated in
            this image from <xref linkend="exist-book"/>:</para>
        <figure xml:id="exist-book-jetty"
            xreflabel="eXist web applicaation  platform architecture (Siegel and Retter 2014: 72)">
            <mediaobject>
                <imageobject>
                    <imagedata format="jpg" fileref="jetty.jpg" width="40%"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>Since its early years users have been able to interact with eXist-db by communicating
            directly with the Jetty server, and over time eXist-db has increasingly come to support
            features that are more commonly associated with a Content Management System (CMS) than
            with a database, such as themes, templates, and page management (not just data resource
            management). We might consider the eXist-db core functionality, the DBMS services at the
            innermost layer of an eXist-db installation, as analogous to the peanut butter center of
            a Reese’s Peanut Butter Cup, and the Jetty servlet container, which can also provide CMS
            services, as the outer layer of chocolate. But the analogy does not depend only on the
            fact that the eXist-db DBMS services are wrapped, as it were, inside Jetty’s CMS ones.
            Peanut butter and chocolate have a long history as independently popular foodstuffs, and
            neither depends in any necessary, obvious, or even intuitive way on the other, yet their
            combination in a single product has proven impressively popular with consumers.
            Similarly, there is nothing about a DBMS that requires or expects CMS services, and vice
            versa, yet the growing integration of the two types of functionality within eXist-db
            confirms that they can be combined to create a resource for developing and deploying
            digital editions.</para>
        <para>With the release of TEI Publisher 4.0 in December 2018 [<xref
                linkend="teiPublisher4.0"/>], built on a Web Components foundation [<xref
                linkend="webComponents"/>], eXist-db can be said to provide a hosting platform for
            digital editions that both goes very far beyond traditional DBMS services and provides
            functionality that would normally be expected from a CMS. The TEI Publisher
            documentation says as much explicitly (see especially the paragraph below the numbered list):<blockquote>
                <para>Despite its elegant simplicity, various projects we realized in the past prove
                    that the TEI Processing Model is: <blockquote>
                        <para>1. powerful enough to cover complex transformation needs</para>
                        <para>2. a truly universal tool for any kind of digital edition</para>
                        <para> 3. efficient and as fast (or faster) as handwritten
                            transformations</para>
                        <para>4. suitable for any XML, not just TEI (this documentation is written
                            in docbook!)</para>
                    </blockquote>However, online editions require more than just a text
                    transformation: the text needs to be embedded into an application context,
                    adding navigation, pagination, search, facsimile display and so on. The larger
                    part of TEI Publisher deals with those aspects, providing all the necessary
                    building blocks for an online edition. [<xref linkend="teiPublisherQuick"
                    />]</para>
            </blockquote></para>
        <para>After a digression about model—view—controller (MVC) architecture, which serves as a
            reference point for comparison and discussion, in the following sections we describe
            four models for integrating digital edition content into eXist-db. These are, in
            increasing order of eXist-db dependence: <orderedlist>
                <listitem>
                    <para>using Apache [<xref linkend="apache"/>] and PHP [<xref linkend="php"/>] to
                        mediate between the user and eXist-db, so that eXist-db provides only DBMS
                        services;</para>
                </listitem>
                <listitem>
                    <para>the eXist-db app framework without HTML templating [<xref linkend="webapp"
                        />];</para>
                </listitem>
                <listitem>
                    <para>the eXist-db app framework using HTML templating [<xref
                            linkend="templating"/>]; and</para>
                </listitem>
                <listitem>
                    <para>TEI Publisher [<xref linkend="teiPublisher"/>].</para>
                </listitem>
            </orderedlist>Each of these ways of conceptualizing and implementing the infrastructure
            for a digital edition has advantages and disadvantages, primarily from the perspective
            of sustainability. Those concerns are applicable to digital edition frameworks
            generally, and are therefore not specific to eXist-db.</para>
    </section>
    <section>
        <title>Model—View—Controller architecture (MVC)</title>
        <para>MVC is an architecture that separates an application into three components: Model,
            View, and Controller.<footnote>
                <para>For a history of MVC see <xref linkend="reenskaug"/>.</para>
            </footnote> The following explanation is based on <xref linkend="mvc"/>): <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Model:</emphasis> the data and core DBMS
                        functionality.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">View:</emphasis> the user interface (UI), such as
                        web forms that accept user input and the HTML returned to the user in
                        response to queries.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Controller:</emphasis> The interface between the
                        model and the view. The controller may translate user-supplied values from a
                        web form (part of the view) into a database query (interacting with the
                        model) and return the results (drawn from the model) as an HTML page (part
                        of the view).</para>
                </listitem>
            </itemizedlist>These components and the relationships among them may be represented as
                follows:<figure xml:id="mvc_image"
                xreflabel="Three-tier MVC architecture (https://www.wideskills.com/struts/introduction-to-mvc-architecture)">
                <mediaobject>
                    <imageobject>
                        <imagedata format="png" fileref="three-tier-mvc.png" width="50%"/>
                    </imageobject>
                </mediaobject>
            </figure></para>
        <para>The Model in all of the examples below is the XML data stored inside eXist-db and the
            core eXist-db database functionality that interacts with the data (e.g., the ability to
            interpret XQuery and navigate collections and resources). The View in all of the
            examples is the UI, that is, web pages as presented to the user, both those that elicit
            user input (such as query forms) and those that respond to user input (such as formatted
            results returned from a query). The most variable aspect of the examples below is the
            Controller, that is, the part of the architecture that 1) responds to user interaction
            with the View by interacting with the Model and 2) updates the View in response to user
            activity, often recruiting and manipulating user-specified information retrieved from
            the Model.<footnote>
                <para>There are several variants in descriptions of MVC to the architecture
                    illustrated above, two of the most important of which are:<itemizedlist>
                        <listitem>
                            <para>In some descriptions, although the Controller translates user
                                interaction (in the View) into instructions to the Model, the Model
                                returns directly to the View, without passing through the
                                Conteroller.</para>
                        </listitem>
                        <listitem>
                            <para>The dividing line between the Controller and the Model is not
                                always clear. Basic XQuery support (that is, support for XQuery
                                syntax and the function library) is part of the Model, but whether a
                                particular XQuery script is part of the Model (perhaps stored inside
                                the database) or the Controller (perhaps constructed with PHP and
                                then passed into the database) is less certain. The boundaries may
                                be even harder to discern when all three parts of the MVC
                                architecture are implemented inside eXist-db.</para>
                        </listitem>
                    </itemizedlist></para>
            </footnote></para>
    </section>
    <section>
        <title>Four ways of building an edition with eXist-db</title>
        <section>
            <title>PHP</title>
            <para>A common architecture for web interfaces that incorporate a DBMS (relational, XML,
                or other) is that users interact only with a standard HTTP server, such as Apache
                running on port 80. Under this approach, the front end is managed with HTML forms
                (part of the View) that launch a PHP script (part of the Controller) when the user
                hits a Submit button or otherwise causes an event to happen that initiates
                processing. The PHP script then harvests form data submitted by the user and
                interacts (for example, using a REST call) with a DBMS, retrieves the necessary
                information, shapes it into HTML, and returns it to the user in the context of a web
                page (part of the View). This is the foundation of the fundamental open-source LAMP
                stack: Linux (OS), Apache (HTTP server), MySQL (DBMS), and PHP (controller
                language).</para>
            <para>The strictest implementation of this type of system in an eXist-db context relies
                on eXist-db only as an XML database, that is, as an alternative to the MySQL
                component of LAMP. For example, a PHP script running inside an Apache server on port
                80, which is the only direct point of access for the end-user, might incorporate
                user-supplied form values into an XQuery script that is then passed into eXist-db
                using the eXist-db REST interface. The results of the query are returned to the PHP
                script, which then shapes them into HTML, associates CSS and JavaScript, and returns
                a response page to the user. Under this stricter model, the CSS and JavaScript
                reside on the Apache server because they are part of the front-end functionality,
                and not of the DBMS services. And the only part of the content of the returned page
                (the modified View) that is connected to eXist-db is information that depends on XML
                stored inside eXist-db. The rest of the HTML returned page is part of the PHP
                script.</para>
            <para>Looser implementations of this approach might offload additional Controller
                functionality onto eXist-db. For example, XML retrieved from inside the database
                might be transformed to HTML markup inside eXist-db (using the XQuery
                    <code>typeswitch()</code> function or XSLT by way of the eXist-db
                    <code>transform:transform()</code> function<footnote>
                    <para>As of Version 4.6.1 (March 2019) eXist-db supports a custom
                            <code>transform:transform()</code> function in a custom namespace, but
                        not the standard XPath 3.1 <code>fn:transform()</code> function in the
                        standard XPath 3.1 namespace.</para>
                </footnote>) instead of by the PHP script after the eXist-db query returns. Looser
                implementations might also store the XQuery script inside eXist-db and pass it
                user-supplied parameters, instead of integrating the parameters into the query
                within PHP before passing the entire constructed query into eXist-db. And looser
                implementations might store some front-end components inside eXist-db, such as CSS
                and JavaScript, although these might most properly be regarded as aspects of the
                View, rather than of the Model. What these variations all have in common, though, is
                that PHP provides all or most or, at least, some of the Controller functionality of
                the MVC architecture.</para>
            <para>The principal advantage of using eXist-db only as a DBMS, and limiting its role as
                Controller, is reducing dependency on custom features of eXist-db. To the extent
                that this separation of concerns allows the use of standard XQuery, with no
                non-standard, implementation-specific features, users may replace eXist-db with an
                alternative XML DBMS, such as BaseX [<xref linkend="basex"/>] or Marklogic [<xref
                    linkend="marklogic"/>], with minimal adjustment to the Controller. However,
                insofar as all XML DBMSs rely to some extent on custom functions in custom namespaces<footnote>
                    <para>See <link>http://exist-db.org/exist/apps/fundocs/browse.html</link> for
                        eXist-db modules, <link>http://docs.basex.org/wiki/Module_Library</link> for
                        BaseX modules, and <link>https://docs.marklogic.com/all</link> for Marklogic
                        modules.</para>
                </footnote>, it is unlikely that a useful application of any complexity will be able
                to avoid proprietary features entirely. It is nonetheless the case that an
                application that does not rely on application-specific features at the Controller
                level reduces—even if it does not entirely eliminate—the extent of the lock-in to a
                specific XML DBMS product.</para>
            <para>The principal disadvantage of using eXist-db only as a DBMS and locating all of
                the Controller logic in the PHP is an increase in the complexity of the overall
                architecture. Specifically, in this arrangement the Controller interjects a PHP
                layer between the View and the core XML DBMS services provided by XQuery within the
                Model, and the need to communicate between PHP and XQuery introduces an additional
                potential zone of failure. The separation of concerns (Controller in PHP, which
                interacts with a Model that underestands XQuery) is generally (and not unreasonably)
                considered a virtue because of its modularity, since the connectivity between the
                two is mediated through an API. For example, PHP that knows how to communicate
                between a web form and a relational DBMS can be reused to communicate between the
                same form and an XML DBMS by adapting only the API-specific parts (for example, by
                replacing SQL queries with XQuery ones). But this modularity comes at the price of
                requiring more complex communication between the View and the Model. For example,
                when a query fails during development under this approach, the failure may reside in
                the PHP code, in the XQuery code, or in a miscommunication (REST connectivity, API,
                or other). The PHP layer also complicates deployment because it requires
                configuration of both eXist-db and PHP resources on the host. With that said, this
                is an old and very widespread method in the relational DBMS world, as in the
                familiar LAMP architecture.</para>
            <para>We have applied several varieties of this implementation in production. The most
                manageable (easiest to develop, debug, maintain) arrangement has involved the
                following workflow:<orderedlist>
                    <listitem>
                        <para>The user enters information into an HTML form and submits the form,
                            which fires a PHP script.</para>
                    </listitem>
                    <listitem>
                        <para>The script collects the input, sanitizes and validates it, and
                            executes a REST call to an XQuery script that has been installed inside
                            eXist-db. This avoids the legibility issues that arise when trying to
                            construct an XQuery script while observing PHP syntax. A sample query as
                            formulated within a PHP script might look like the following (where
                                <code>REST_PATH</code> has been declared with a value like
                                <code>http://example.com:8080/exist/rest</code> in an imported file,
                            and the <code>$country</code> and <code>$text</code> variables are
                            user-supplied values retrieved from the query
                            form):<programlisting>$xql = REST_PATH . "/db/repertorium/xquery/runSearch.xql?country=$country&amp;text=$text";
echo file_get_contents($xql);</programlisting></para>
                    </listitem>
                    <listitem>
                        <para>eXist-db receives the REST calll, dereferences the parameters, runs
                            the query (previously stored inside eXist-db), transforms the results to
                            a well-balanced XHTML fragment using <code>typeswitch()</code> or XSLT
                            with <code>transform:transform()</code>, and returns it to the PHP
                            script.</para>
                    </listitem>
                    <listitem>
                        <para>The PHP script inserts the returned result in the correct place, the
                            location of the <code>echo file_get_contents($xql);</code> instruction
                            in the example above.</para>
                    </listitem>
                    <listitem>
                        <para>The result is a valid XHTML page, which the PHP script then returns to
                            the user.</para>
                    </listitem>
                </orderedlist></para>
        </section>
        <section>
            <title>Apps without HTML templating</title>
            <para>blah blah blah</para>
        </section>
        <section>
            <title>Apps with HTML templating</title>
            <para>blah blah blah</para>
        </section>
        <section>
            <title>TEI Publisher</title>
            <para>blah blah blah</para>
        </section>
    </section>
    <section>
        <title>Conclusion</title>
        <section>
            <title>General</title>
            <para>Preview of summary conclusions: technical (essentially para-technical, involving
                sustainability) and philosophical</para>
        </section>
        <section>
            <title>Sustainability</title>
            <para>CMS supports easy customization within anticipated, supported parameters, while
                major innovation may be harder than building from scratch</para>
            <para>CMS supports <emphasis role="ital">.xar</emphasis> packaging for easy replication,
                distribution, deployment; porting PHP + eXist-db is much more complicated</para>
            <para>CMS increases lock-in and complicates migration to different XML database</para>
        </section>
        <section>
            <title>The interface and the scholarship</title>
            <para>Contrast <quote>CMS lets you concentrate on the content and leave the technology
                    to the tech professionals</quote> with <quote>the interface is part of the
                    scholarship</quote> (cite Graz 2016 DiXiT presentations by Wout and Tara and
                Joris)</para>
        </section>
    </section>
    <bibliography>
        <title>Works cited</title>
        <bibliomixed xml:id="apache" xreflabel="Apache"><quote>Apache HTTP server project.</quote>
            <link>https://httpd.apache.org</link></bibliomixed>
        <bibliomixed xml:id="basex" xreflabel="BaseX">BaseX. The XML framework.
                <link>http://basex.org</link>/</bibliomixed>
        <bibliomixed xml:id="eXist-db" xreflabel="eXist-db"><quote>eXist-db.</quote>
            <link>http://exist-db.org</link></bibliomixed>
        <bibliomixed xml:id="templating" xreflabel="eXist-db HTML templating"><quote>eXist-db: HTML
                Templating Module.</quote>
            <link>http://exist-db.org/exist/apps/doc/templating.xml</link></bibliomixed>
        <bibliomixed xml:id="webapp" xreflabel="eXist-db Web application"><quote>eXist-db: Getting
                started with Web application development.</quote>
            <link>http://exist-db.org/exist/apps/doc/development-starter</link></bibliomixed>
        <bibliomixed xml:id="Jetty" xreflabel="Jetty">Eclipse Jetty.
                <link>https://www.eclipse.org/jetty/</link></bibliomixed>
        <bibliomixed xml:id="marklogic" xreflabel="Marklogic">MarkLogic | Data Integration and NoSQL
            Databases for Your Business. <link>https://www.marklogic.com/</link></bibliomixed>
        <bibliomixed xml:id="mvc" xreflabel="MVC architecture">Wideskills. <quote>Introduction to
                MVC architecture.</quote>
            <link>https://www.wideskills.com/struts/introduction-to-mvc-architecture</link></bibliomixed>
        <bibliomixed xml:id="php" xreflabel="PHP"><quote>PHP: hypertext preprocessor.</quote>
            <link>https://www.php.net/</link></bibliomixed>
        <bibliomixed xml:id="punch" xreflabel="Punch">Wicentowski, Joe. <quote>Punch. A simple
                application written in XQuery for eXist demonstrating how to create a dynamic,
                searchable website for TEI text.</quote>
            <link>https://github.com/joewiz/punch</link></bibliomixed>
        <bibliomixed xml:id="reenskaug" xreflabel="Reenskaug">Reenskaug, Trygve M. H. <quote>MVC.
                Xerox PARC 1978–79.</quote>
            <link>http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html</link></bibliomixed>
        <bibliomixed xml:id="reeses" xreflabel="Reese’s"><quote>Vintage 80s Reese’s peanut butter
                cups commercial with walkers.</quote>
            <link>https://www.youtube.com/watch?v=DJLDF6qZUX0</link></bibliomixed>
        <bibliomixed xml:id="exist-book" xreflabel="Siegel and Retter 2014">Siegel, Erik and Adam
            Retter. <emphasis role="ital">eXist. A NoSQL document database and application
                platform.</emphasis> Sebastopol, CA: O’Reilly. 2014.</bibliomixed>
        <bibliomixed xml:id="teiPublisher" xreflabel="TEI Publisher"><quote>TEI publisher.</quote>
            <link>https://teipublisher.com</link></bibliomixed>
        <bibliomixed xml:id="teiPublisher4.0" xreflabel="TEI Publisher 4.0"><quote>TEI Publisher
                4.0.</quote> Product announcement. 2018-12-20.
                <link>https://teipublisher.com/exist/apps/tei-publisher/doc/blog/tei-publisher-40.xml</link></bibliomixed>
        <bibliomixed xml:id="teiPublisherQuick" xreflabel="TEI Publisher Quickstart"><quote>TEI
                Publisher Quickstart.</quote>
            <link>https://teipublisher.com/exist/apps/tei-publisher/doc/documentation.xml</link></bibliomixed>
        <bibliomixed xml:id="upton" xreflabel="Upton 2013">Upton, Emily. <quote>The fascinating rise
                of Reese’s Peanut Butter Cups.</quote>
            <emphasis role="ital">Business insider.</emphasis> June 30, 2013.
                <link>https://www.businessinsider.com/the-fascinating-rise-of-reeses-peanut-butter-cups-2013-6</link></bibliomixed>
        <bibliomixed xml:id="webComponents" xreflabel="Web Components">webcomponents.org.
                <quote>Introduction.</quote>
            <link>https://www.webcomponents.org/introduction</link></bibliomixed>
    </bibliography>
</article>
